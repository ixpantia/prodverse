{"config":{"lang":["en","es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prodverse","text":"prodverse <p>             The prodverse is a toolbox designed by ixpantia for taking your             data science projects to production. The ecosystem is built to help             you and your team build, deploy, and maintain production-ready data             products written with the R programming language.         </p>"},{"location":"#what-is-the-prodverse-exactly","title":"What is the prodverse exactly?","text":"<p>The prodverse is a collection of tools and R packages that help you build, deploy, and maintain production-ready data products written with the R programming language.</p> <p>The goals of the prodverse are to:</p> <ul> <li>Make R scalable: R is a great language for data science, but     many times the tools to scale it to many users are missing.     The prodverse aims to fill this gap.</li> <li>Make R ready for production: R with Shiny and Plumber are amazing     tools, but there are many things that are needed to make them production-ready.     Authentication, logging, and replication are just a few of the things that     the prodverse provides.</li> <li>No vendor lock-in: The prodverse aims to provide a great experience     anywhere you want to deploy your R applications.</li> </ul>"},{"location":"#should-i-consider-the-prodverse-over-other-tools","title":"Should I consider the prodverse over other tools?","text":"<p>The prodverse is not for everyone. If you are looking for a tool that allows for one-click deployment and easy sharing of your R applications, Rmarkdown / quarto docuemtns, and more then you should consider Posit Connect. Posit Connect is a great tool for sharing your R applications with your data science team or your organization.</p> <p>If your data science team is not ready for a full-fledged data science platform like Posit Connect, or needs a more customized solution, then the prodverse might be a good fit for you.</p>"},{"location":"#need-help","title":"Need help?","text":"<p>If you need personalized consulting or support for your data science team please reach out to us at ixpantia.com.</p>"},{"location":"tools/","title":"Tools & Packages","text":""},{"location":"tools/#faucet","title":"faucet","text":"<p>faucet is a web server that makes Shiny applications and Plumber APIs available to the web with minimal configuration, replication, logging and load balancing out of the box. faucet is designed to be used on any platform, cloud or on-premise, and is compatible with any Shiny application or Plumber API. faucet is built with Rust to deliver high performance and low resource usage. Learn more from the faucet documentation.</p>"},{"location":"tools/#taplock","title":"tapLock","text":"<p>tapLock is an R package that provides a simple yet powerful and secure way to lock down Shiny applications and Plumber APIs with Single Sign-On (SSO). tapLock uses the OAuth 2.0 protocol with OpenID Connect (OIDC) to authenticate users with many popular identity providers (IdPs) such as Google, Entra ID / Active Directory, Auth0 and many more. tapLock uses a unique approach to secure Shiny applications and Plumber APIs that requires no mayor changes to existing code. Learn more from the tapLock documentation.</p>"},{"location":"get_started/","title":"Get started","text":"<p>Hello there! This is your first step to becoming an expert at taking R applications to production. In this section you will find many tutorial articles that will help you get up and running with the prodverse.</p> <p>Shiny in production with the prodverse is a tutorial that will take you through the process of building a very minimal Shiny application with user authentication and deploying it to a server with replicas and load balancing using faucet and tapLock. (The app in the tutorial is very minimal and not particularly useful, but it is a good starting point for understanding the prodverse.)</p> <p>Scaling Plumber with faucet is a tutorial that will walk you through the process of scaling a Plumber API with faucet. First you will install faucet and test it out locally, then you will use Docker to build a container image for your API. The API will be slow to show how faucet will attempt to make it faster by adding replicas and load balancing.</p>"},{"location":"get_started/shiny_in_prod/","title":"Shiny in production with the prodverse","text":"<p>Welcome! You are one step closer to learning how to deploy a public-facing Shiny app with the prodverse. This app will be public-facing, meaning that anyone with the URL will be able to access it, however, it will be protected by Google authentication. This means that only people you add as a test user will be able to access the app.</p> <p>Deploying a private app usually involves organization-specific configuration, firewall rules, and other security measures. If your organization uses Google as its identity provider, you can use this guide to deploy a private app with minimal additional configuration.</p>"},{"location":"get_started/shiny_in_prod/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Google Cloud Platform (GCP) account: You will need a   GCP account to create a project and enable the APIs that   the prodverse uses. You can create a free account   here.</li> <li>A Google Cloud Platform project: You will need a GCP   project to deploy your app to. You can create a project   here.</li> <li>A domain name: You will need a domain name to deploy   your app to. This can be a subdomain of a domain you,   for example, <code>example.com</code> or <code>myapp.example.com</code>.</li> <li>(Optional) An internet connected Linux VM: You might   want a virtual machine to run the prodverse on. This is   optional since you don't fully need it, you can run the   example app on your local machine, Linux, Mac, or Windows.   However, if you want to share your app with others, it is   recommended to use a VM. This guide will assume that you   have a Linux VM with Docker installed.</li> </ul>"},{"location":"get_started/shiny_in_prod/#step-1-create-a-gcp-project","title":"Step 1: Create a GCP project","text":"<p>If you already have a GCP project, you can skip this step.</p> <ol> <li>Go the following link:     https://console.cloud.google.com/projectcreate</li> <li>Name your project</li> <li>Click <code>Create</code></li> </ol> <p></p>"},{"location":"get_started/shiny_in_prod/#step-2-create-an-oauth-consent-screen","title":"Step 2: Create an OAuth consent screen","text":"<p>If you already have an OAuth consent screen, you can skip this step.</p> <ol> <li>Go to the following link:     https://console.cloud.google.com/apis/credentials/consent</li> <li>Select <code>External</code> and click <code>Create</code>: If you are in an organization,      you might want to select <code>Internal</code> instead. If you are using a     personal GCP account, you will not be able to select <code>Internal</code>.     <code>Internal</code> will allow you to share the app with people in your     organization without having to add them as test users.     </li> <li>Name your OAuth consent screen and fill out the required fields.</li> <li>Click <code>Save and Continue</code></li> <li>Add the following none-sensitive scopes:     </li> <li>Click <code>Save and Continue</code></li> <li>Add your test users (Only if you selected <code>External</code> in step 2) </li> <li>Click <code>Save and Continue</code></li> <li>Validate that the information is correct and click <code>Back to Dashboard</code></li> </ol>"},{"location":"get_started/shiny_in_prod/#step-3-create-an-oauth-client-id","title":"Step 3: Create an OAuth client ID","text":"<p>If you already have an OAuth client ID, you can skip this step, however, you will need to make sure that the client ID follows the fields as shown in this step.</p> <p></p> <p>After clicking <code>Create OAuth client ID</code>, you will be presented with a form you will need fill out. The following fields are required:</p> <ul> <li>Application type: <code>Web application</code></li> <li>Name: Whatever you want to name your app</li> <li>Authorized JavaScript origins: <code>http://&lt;your-domain&gt;</code> or <code>https://&lt;your-domain&gt;</code> (if you have SSL)</li> <li>Authorized redirect URIs: <code>http://&lt;your-domain&gt;/login</code> or <code>https://&lt;your-domain&gt;/login</code> (if you have SSL)</li> </ul> <p>For this example the domain will be <code>example.com</code>, so the fields you be filled out as follows:</p> <ul> <li>Application type: <code>Web application</code></li> <li>Name: <code>My Shiny App</code></li> <li>Authorized JavaScript origins: <code>http://example.com</code></li> <li>Authorized redirect URIs: <code>http://example.com/login</code></li> </ul> <p>Make sure to replace <code>example.com</code> with your domain.</p> <p>Once you have filled out the form, click <code>Create</code> and save the <code>Client ID</code> and <code>Client secret</code> for later.</p> <p></p>"},{"location":"get_started/shiny_in_prod/#step-4-our-shiny-app","title":"Step 4: Our Shiny app","text":"<p>For this example, we will create a very simple Shiny app that will display a plot with a random distribution. The app will use a slider to change the number of observations in the distribution. This app will also use <code>tapLock</code> to add authentication to the app. This app will also use it to show nice welcome messages to the user.</p> <p>Before building the app we will need to install <code>tapLock</code> and <code>shiny</code>:</p> <pre><code>install.packages(c(\"shiny\", \"tapLock\"))\n</code></pre> <p>Also, create an <code>.Renviron</code> file for testing purposes. If you are using Docker or any other solution for your environment variables, go ahead and do that instead.</p> <pre><code># .Renviron\nGOOGLE_CLIENT_ID=&lt;your-client-id&gt;\nGOOGLE_CLIENT_SECRET=&lt;your-client-secret&gt;\nAPP_URL=&lt;your-app-url&gt;\n</code></pre> <p>Now this will be our app:</p> <pre><code># app.R\nlibrary(shiny)\nlibrary(tapLock)\n\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      # A welcome message to the user\n      h3(textOutput(\"welcome\")),\n      sliderInput(\"n\", \"Number of observations\", 1, 100, 50)\n    ),\n    mainPanel(\n      # A histogram of the generated distribution\n      plotOutput(\"plot\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n\n  output$plot &lt;- renderPlot({\n    hist(rnorm(input$n))\n  })\n\n  output$welcome &lt;- renderText({\n    paste(\n      \"Welcome\",\n      # Here we extract the field \"name\" from the authentication token\n      get_token_field(token(), \"name\"),\n      \"to the app!\"\n    )\n  })\n\n}\n\n# We get the client id and secret from the environment variables\nclient_id &lt;- Sys.getenv(\"GOOGLE_CLIENT_ID\")\nclient_secret &lt;- Sys.getenv(\"GOOGLE_CLIENT_SECRET\")\napp_url &lt;- Sys.getenv(\"APP_URL\")\n\n# We create a new authentication configuration for Google\nauth_config &lt;- new_google_config(\n  client_id = client_id,\n  client_secret = client_secret,\n  app_url = app_url\n)\n\n# Instead of using shinyApp(), we use tapLock::sso_shiny_app()\nsso_shiny_app(auth_config, ui, server)\n</code></pre>"},{"location":"get_started/shiny_in_prod/#step-5-deploying-the-app","title":"Step 5: Deploying the app","text":"<p>We have an app, now we need to deploy it. The exact method for deploying the app will depend on your environment, operating system, and other factors. For this example we will use Docker, however, you can use Systemd services, Windows services, or any other method you prefer. Docker is just a convenient way to deploy the app since anyone running Linux, Mac, or Windows can use it.</p> <p>We will be using <code>faucet</code>, a very lightweight web server that manages Shiny apps and Plumber APIs with built-in replication and load balancing. It is also very easy to use and configure.</p> <p>First, we will create a <code>Dockerfile</code>:</p> <pre><code># Faucet docker image tags have two components:\n# 1. The faucet version\n# 2. The R version\n# For this example we will use faucet with R 4.3\n# This will pull the latest version of faucet with R 4.3\nFROM ixpantia/faucet:r4.3\n\n# Install the required packages\nRUN Rscript -e \"install.packages(c('shiny', 'tapLock'))\"\n\n# We copy the app.R file to the image\n# on the current working directory\nCOPY --chown=faucet:faucet ./app.R app.R\n\nUSER faucet\n</code></pre> <p>Note: From here on out, we will assume that you are working on your virtual machine, or at least where you mean to deploy the app. You can continue testing the app locally if you have setup the OAuth client ID to use <code>localhost</code> as the origin and redirect URI. We will be exposing port 80 when we run the container, if you want to change this, you will have to setup the OAuth client ID to use the correct port.</p> <p>Now we will build the image:</p> <pre><code>sudo docker build -t my-shiny-app .\n</code></pre> <p>Before running the container, remember we need to set the environment variables. For this example, we will create a file called <code>.env</code> anywhere on the server, we will assume you run the following command on the same directory as the <code>.env</code> file. If not, change the path to the absolute path of the <code>.env</code> file.</p> <pre><code>sudo docker run --restart unless-stopped --env-file .env -p 80:3838 my-shiny-app\n</code></pre> <p>Here we are running the container with the environment variables available in the <code>.env</code> file, and we are exposing port 80 on the host to port 3838 on the container. If you want to use another port, change the first number to the port you want to use.</p> <p>You should now be able to access your app at <code>http://&lt;your-domain&gt;</code>. If you want to use SSL you will want to use a reverse proxy like Nginx or Apache. Check out Shiny Server: Running with a Proxy for examples on how to do this. You can also read faucet: With Reverse Proxy for more information on how to use a reverse proxy with faucet.</p>"},{"location":"get_started/shiny_in_prod/#step-6-tuning-our-deployment","title":"Step 6: Tuning our deployment","text":"<p>Our deployment currently uses the base faucet configuration, which is mostly great. However, you may want to customize things like the number of workers (the number of concurrent Shiny instances), if you are using a reverse proxy, you will probably want to use the <code>X-Forwarded-For</code> or <code>X-Real-IP</code> headers to get the real IP address of the user, and other aspects of the deployment.</p>"},{"location":"get_started/shiny_in_prod/#number-of-workers","title":"Number of workers","text":"<p>By default, faucet will use the number of CPU cores as the number of workers. This is usually a good default, however, you may want to change this depending on your app. For example, if your app is very CPU intensive, you may want to use less workers to avoid overloading the CPU. If your app is very I/O intensive, you may want to use more workers to avoid blocking the workers.</p> <p>To change the number of workers, you can use the <code>FAUCET_WORKERS</code> environment variable. For example, if you want to use 4 workers, you can change the <code>.env</code> file to the following:</p> <pre><code>GOOGLE_CLIENT_ID=&lt;your-client-id&gt;\nGOOGLE_CLIENT_SECRET=&lt;your-client-secret&gt;\nAPP_URL=&lt;your-app-url&gt;\nFAUCET_WORKERS=4\n</code></pre>"},{"location":"get_started/shiny_in_prod/#using-a-reverse-proxy","title":"Using a reverse proxy","text":"<p>When using a reverse proxy, you will want to use the <code>X-Forwarded-For</code> or <code>X-Real-IP</code> headers to get the real IP address of the user. This is because the IP address of the user will be the IP address of the reverse proxy, not the IP address of the user. This is important if you want to properly log and load balance your app.</p> <p>To use the <code>X-Forwarded-For</code> or <code>X-Real-IP</code> headers, you can use the <code>FAUCET_IP_FROM</code> environment variable.</p> <p>For example, if you are using Nginx, you can add the following to your <code>location</code> block:</p> <pre><code>proxy_set_header    X-Real-IP $remote_addr;\nproxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n</code></pre> <p>Now you can change the <code>.env</code> file to the following:</p> <pre><code>GOOGLE_CLIENT_ID=&lt;your-client-id&gt;\nGOOGLE_CLIENT_SECRET=&lt;your-client-secret&gt;\nAPP_URL=&lt;your-app-url&gt;\nFAUCET_IP_FROM=x-real-ip\n</code></pre>"},{"location":"get_started/shiny_in_prod/#step-7-letting-our-app-run-in-the-background","title":"Step 7: Letting our app run in the background","text":"<p>Now that we have our app running, we want to make sure that it keeps running even if we close our terminal. For this we will run the container in detached mode and we will use <code>docker compose</code> to manage the container.</p> <p>First, we will create a <code>docker-compose.yml</code> file:</p> <pre><code>version: \"3.9\"\nservices:\n  my-shiny-app:\n    image: my-shiny-app\n    restart: unless-stopped\n    env_file: .env\n    ports:\n      - \"80:3838\"\n</code></pre> <p>Now we can run the container in detached mode:</p> <pre><code>sudo docker compose up -d\n</code></pre> <p>You can now close your terminal and the container will keep running.</p>"},{"location":"get_started/shiny_in_prod/#conclusion","title":"Conclusion","text":"<p>You now have a public-facing Shiny app that is protected by Google authentication. You can share the URL with anyone you want and they will be able to access the app as long as they are added as test users in the OAuth consent screen.</p> <p>Or if your app is internal, you can share the URL with anyone in your organization and they will be able to access the app as long as they are part of your organization.</p> <p>You could improve this deployment by adding SSL, using a reverse proxy, fine-tuning the number of workers, and other aspects of the deployment. However, this is a good starting point for a public-facing Shiny app.</p>"},{"location":"es/","title":"prodverse","text":"prodverse <p>             Prodverse es una caja de herramientas dise\u00f1ada por ixpantia para llevar tus             proyectos de ciencia de datos a producci\u00f3n. El ecosistema est\u00e1 construido para ayudarte             a ti y a tu equipo a construir, desplegar y mantener productos de datos listos para producci\u00f3n             escritos con el lenguaje de programaci\u00f3n R.         </p>"},{"location":"es/#que-es-exactamente-el-prodverse","title":"\u00bfQu\u00e9 es exactamente el prodverse?","text":"<p>Prodverse es una colecci\u00f3n de herramientas y paquetes de R que te ayudan a construir, desplegar y mantener productos de datos listos para producci\u00f3n escritos con el lenguaje de programaci\u00f3n R.</p> <p>Los objetivos de prodverse son:</p> <ul> <li>Hacer escalable a R: R es un gran lenguaje para ciencia de datos, pero     muchas veces faltan las herramientas para escalarlo a muchos usuarios.     Prodverse tiene como objetivo llenar este vac\u00edo.</li> <li>Preparar a R para producci\u00f3n: R con Shiny y Plumber son herramientas incre\u00edbles,     pero hay muchos aspectos que se necesitan para hacerlas listas para producci\u00f3n.     Autenticaci\u00f3n, registro y replicaci\u00f3n son solo algunos de los aspectos que     prodverse proporciona.</li> <li>Sin bloqueo de proveedor: Prodverse tiene como objetivo proporcionar una gran experiencia     donde quiera que desees desplegar tus aplicaciones R.</li> </ul>"},{"location":"es/#deberia-considerar-prodverse-sobre-otras-herramientas","title":"\u00bfDeber\u00eda considerar prodverse sobre otras herramientas?","text":"<p>Prodverse no es para todos. Si buscas una herramienta que permita un despliegue con un solo clic y compartir f\u00e1cilmente tus aplicaciones R, documentos Rmarkdown / quarto, y m\u00e1s, entonces deber\u00edas considerar Posit Connect. Posit Connect es una gran herramienta para compartir tus aplicaciones R con tu equipo de ciencia de datos o tu organizaci\u00f3n.</p> <p>Si tu equipo de ciencia de datos no est\u00e1 listo para una plataforma de ciencia de datos completamente equipada como Posit Connect, o necesita una soluci\u00f3n m\u00e1s personalizada, entonces prodverse podr\u00eda ser una buena opci\u00f3n para ti.</p>"},{"location":"es/#necesitas-ayuda","title":"\u00bfNecesitas ayuda?","text":"<p>Si necesitas consultor\u00eda personalizada o soporte para tu equipo de ciencia de datos, por favor cont\u00e1ctanos en ixpantia.com.</p>"},{"location":"es/tools/","title":"Herramientas y paquetes","text":""},{"location":"es/tools/#faucet","title":"faucet","text":"<p>faucet es un servidor web que hace que las aplicaciones Shiny y las APIs Plumber est\u00e9n disponibles en la web con una configuraci\u00f3n m\u00ednima, replicaci\u00f3n, logging y balanceo de carga de manera autom\u00e1tica. faucet est\u00e1 dise\u00f1ado para ser utilizado en cualquier plataforma, nube o local, y es compatible con cualquier aplicaci\u00f3n Shiny o API Plumber. faucet est\u00e1 construido con Rust para ofrecer un alto rendimiento y bajo uso de recursos. Aprende m\u00e1s de la documentaci\u00f3n de faucet.</p>"},{"location":"es/tools/#taplock","title":"tapLock","text":"<p>tapLock es un paquete de R que proporciona una forma sencilla pero potente y segura de bloquear aplicaciones Shiny y APIs Plumber con Inicio de Sesi\u00f3n \u00danico (SSO). tapLock utiliza el protocolo OAuth 2.0 con OpenID Connect (OIDC) para autenticar usuarios con muchos proveedores de identidad populares (IdPs) como Google, Entra ID / Active Directory, Auth0 y muchos m\u00e1s. tapLock utiliza un enfoque \u00fanico para asegurar aplicaciones Shiny y APIs Plumber que no requiere cambios mayores en el c\u00f3digo existente. Aprende m\u00e1s de la documentaci\u00f3n de tapLock.</p>"},{"location":"es/get_started/","title":"Aprende","text":"<p>\u00a1Hola! Este es tu primer paso para convertirte en un experto en llevar aplicaciones R a producci\u00f3n. En esta secci\u00f3n encontrar\u00e1s muchos art\u00edculos tutoriales que te ayudar\u00e1n a comenzar con el prodverse.</p> <p>Shiny en producci\u00f3n con el prodverse es un tutorial que te guiar\u00e1 a trav\u00e9s del proceso de construir una aplicaci\u00f3n Shiny muy m\u00ednima con autenticaci\u00f3n de usuario y desplegarla en un servidor con r\u00e9plicas y balanceo de carga usando faucet y tapLock. (La aplicaci\u00f3n en el tutorial es muy b\u00e1sica y no particularmente \u00fatil, pero es un buen punto de partida para entender el prodverse.)</p> <p>Escalando Plumber con faucet es un tutorial que te llevar\u00e1 a trav\u00e9s del proceso de escalar una API Plumber con faucet. Primero instalar\u00e1s faucet y lo probar\u00e1s localmente, luego usar\u00e1s Docker para construir una imagen de contenedor para tu API. La API ser\u00e1 lenta para mostrar c\u00f3mo faucet intentar\u00e1 hacerla m\u00e1s r\u00e1pida agregando r\u00e9plicas y balanceo de carga.</p>"},{"location":"es/get_started/shiny_in_prod/","title":"Shiny en producci\u00f3n con el prodverse","text":"<p>\u00a1Bienvenido! Est\u00e1s a un paso de aprender c\u00f3mo desplegar una aplicaci\u00f3n Shiny p\u00fablica con el prodverse. Esta aplicaci\u00f3n ser\u00e1 p\u00fablica, lo que significa que cualquiera con la URL podr\u00e1 acceder a ella, sin embargo, estar\u00e1 protegida por autenticaci\u00f3n de Google. Esto significa que solo las personas que agregues como usuarios de prueba podr\u00e1n acceder a la aplicaci\u00f3n.</p> <p>Desplegar una aplicaci\u00f3n privada generalmente implica configuraci\u00f3n espec\u00edfica de la organizaci\u00f3n, reglas de firewall y otras medidas de seguridad. Si tu organizaci\u00f3n utiliza Google como su proveedor de identidad, puedes usar esta gu\u00eda para desplegar una aplicaci\u00f3n privada con m\u00ednima configuraci\u00f3n adicional.</p>"},{"location":"es/get_started/shiny_in_prod/#prerrequisitos","title":"Prerrequisitos","text":"<ul> <li>Una cuenta de Google Cloud Platform (GCP): Necesitar\u00e1s una   cuenta de GCP para crear un proyecto y habilitar las APIs que   utiliza el prodverse. Puedes crear una cuenta gratuita   aqu\u00ed.</li> <li>Un proyecto de Google Cloud Platform: Necesitar\u00e1s un proyecto de GCP   para desplegar tu aplicaci\u00f3n. Puedes crear un proyecto   aqu\u00ed.</li> <li>Un nombre de dominio: Necesitar\u00e1s un nombre de dominio para desplegar   tu aplicaci\u00f3n. Esto puede ser un subdominio de un dominio que tengas,   por ejemplo, <code>example.com</code> o <code>myapp.example.com</code>.</li> <li>(Opcional) Una VM de Linux conectada a internet: Podr\u00edas   querer una m\u00e1quina virtual para ejecutar el prodverse. Esto es   opcional ya que no lo necesitas completamente, puedes ejecutar la   aplicaci\u00f3n de ejemplo en tu m\u00e1quina local, Linux, Mac o Windows.   Sin embargo, si quieres compartir tu aplicaci\u00f3n con otros, se recomienda   usar una VM. Esta gu\u00eda asumir\u00e1 que tienes una VM de Linux con Docker instalado.</li> </ul>"},{"location":"es/get_started/shiny_in_prod/#paso-1-crear-un-proyecto-de-gcp","title":"Paso 1: Crear un proyecto de GCP","text":"<p>Si ya tienes un proyecto de GCP, puedes saltarte este paso.</p> <ol> <li>Ve al siguiente enlace:     https://console.cloud.google.com/projectcreate</li> <li>Nombra tu proyecto</li> <li>Haz clic en <code>Crear</code></li> </ol> <p></p>"},{"location":"es/get_started/shiny_in_prod/#paso-2-crear-una-pantalla-de-consentimiento-oauth","title":"Paso 2: Crear una pantalla de consentimiento OAuth","text":"<p>Si ya tienes una pantalla de consentimiento OAuth, puedes saltarte este paso.</p> <ol> <li>Ve al siguiente enlace:     https://console.cloud.google.com/apis/credentials/consent</li> <li>Selecciona <code>Externo</code> y haz clic en <code>Crear</code>: Si est\u00e1s en una organizaci\u00f3n,     podr\u00edas querer seleccionar <code>Interno</code> en su lugar. Si est\u00e1s utilizando una     cuenta personal de GCP, no podr\u00e1s seleccionar <code>Interno</code>.     <code>Interno</code> te permitir\u00e1 compartir la aplicaci\u00f3n con personas en tu     organizaci\u00f3n sin tener que agregarlas como usuarios de prueba.     </li> <li>Nombra tu pantalla de consentimiento OAuth y completa los campos requeridos.</li> <li>Haz clic en <code>Guardar y Continuar</code></li> <li>Agrega los siguientes alcances no sensibles:     </li> <li>Haz clic en <code>Guardar y Continuar</code></li> <li>Agrega tus usuarios de prueba (Solo si seleccionaste <code>Externo</code> en el paso 2) </li> <li>Haz clic en <code>Guardar y Continuar</code></li> <li>Valida que la informaci\u00f3n sea correcta y haz clic en <code>Volver al Dashboard</code></li> </ol>"},{"location":"es/get_started/shiny_in_prod/#paso-3-crear-un-id-de-cliente-oauth","title":"Paso 3: Crear un ID de cliente OAuth","text":"<p>Si ya tienes un ID de cliente OAuth, puedes saltarte este paso, sin embargo, necesitar\u00e1s asegurarte de que el ID de cliente siga los campos como se muestra en este paso.</p> <p></p> <p>Despu\u00e9s de hacer clic en <code>Crear ID de cliente OAuth</code>, se te presentar\u00e1 un formulario que necesitar\u00e1s completar. Los siguientes campos son requeridos:</p> <ul> <li>Tipo de aplicaci\u00f3n: <code>Aplicaci\u00f3n web</code></li> <li>Nombre: Como quieras nombrar tu aplicaci\u00f3n</li> <li>Or\u00edgenes de JavaScript autorizados: <code>http://&lt;tu-dominio&gt;</code> o <code>https://&lt;tu-dominio&gt;</code> (si tienes SSL)</li> <li>URI de redirecci\u00f3n autorizadas: <code>http://&lt;tu-dominio&gt;/login</code> o <code>https://&lt;tu-dominio&gt;/login</code> (si tienes SSL)</li> </ul> <p>Para este ejemplo el dominio ser\u00e1 <code>example.com</code>, por lo tanto, los campos se deber\u00e1n completar de la siguiente manera:</p> <ul> <li>Tipo de aplicaci\u00f3n: <code>Aplicaci\u00f3n web</code></li> <li>Nombre: <code>Mi Aplicaci\u00f3n Shiny</code></li> <li>Or\u00edgenes de JavaScript autorizados: <code>http://example.com</code></li> <li>URI de redirecci\u00f3n autorizadas: <code>http://example.com/login</code></li> </ul> <p>Aseg\u00farate de reemplazar <code>example.com</code> con tu dominio.</p> <p>Una vez que hayas completado el formulario, haz clic en <code>Crear</code> y guarda el <code>ID de cliente</code> y el <code>Secreto de cliente</code> para m\u00e1s adelante.</p> <p></p>"},{"location":"es/get_started/shiny_in_prod/#paso-4-nuestra-aplicacion-shiny","title":"Paso 4: Nuestra aplicaci\u00f3n Shiny","text":"<p>Para este ejemplo, crearemos una aplicaci\u00f3n Shiny muy simple que mostrar\u00e1 un gr\u00e1fico con una distribuci\u00f3n aleatoria. La aplicaci\u00f3n usar\u00e1 un deslizador para cambiar el n\u00famero de observaciones en la distribuci\u00f3n. Esta aplicaci\u00f3n tambi\u00e9n usar\u00e1 <code>tapLock</code> para a\u00f1adir autenticaci\u00f3n a la aplicaci\u00f3n. Adem\u00e1s, la usaremos para mostrar mensajes de bienvenida agradables al usuario.</p> <p>Antes de construir la aplicaci\u00f3n necesitaremos instalar <code>tapLock</code> y <code>shiny</code>:</p> <pre><code>install.packages(c(\"shiny\", \"tapLock\"))\n</code></pre> <p>Adem\u00e1s, crea un archivo <code>.Renviron</code> para prop\u00f3sitos de prueba. Si est\u00e1s usando Docker o cualquier otra soluci\u00f3n para tus variables de entorno, adelante y haz eso en su lugar.</p> <pre><code># .Renviron\nGOOGLE_CLIENT_ID=&lt;tu-id-de-cliente&gt;\nGOOGLE_CLIENT_SECRET=&lt;tu-secreto-de-cliente&gt;\nAPP_URL=&lt;tu-url-de-la-aplicaci\u00f3n&gt;\n</code></pre> <p>Ahora esta ser\u00e1 nuestra aplicaci\u00f3n:</p> <pre><code># app.R\nlibrary(shiny)\nlibrary(tapLock)\n\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      # Un mensaje de bienvenida al usuario\n      h3(textOutput(\"welcome\")),\n      sliderInput(\"n\", \"N\u00famero de observaciones\", 1, 100, 50)\n    ),\n    mainPanel(\n      # Un histograma de la distribuci\u00f3n generada\n      plotOutput(\"plot\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n\n  output$plot &lt;- renderPlot({\n    hist(rnorm(input$n))\n  })\n\n  output$welcome &lt;- renderText({\n    paste(\n      \"Bienvenido\",\n      # Aqu\u00ed extraemos el campo \"name\" del token de autenticaci\u00f3n\n      get_token_field(token(), \"name\"),\n      \"a la aplicaci\u00f3n!\"\n    )\n  })\n\n}\n\n# Obtenemos el id de cliente y el secreto del cliente de las variables de entorno\nclient_id &lt;- Sys.getenv(\"GOOGLE_CLIENT_ID\")\nclient_secret &lt;- Sys.getenv(\"GOOGLE_CLIENT_SECRET\")\napp_url &lt;- Sys.getenv(\"APP_URL\")\n\n# Creamos una nueva configuraci\u00f3n de autenticaci\u00f3n para Google\nauth_config &lt;- new_google_config(\n  client_id = client_id,\n  client_secret = client_secret,\n  app_url = app_url\n)\n\n# En lugar de usar shinyApp(), usamos tapLock::sso_shiny_app()\nsso_shiny_app(auth_config, ui, server)\n</code></pre>"},{"location":"es/get_started/shiny_in_prod/#paso-5-desplegar-la-aplicacion","title":"Paso 5: Desplegar la aplicaci\u00f3n","text":"<p>Tenemos una aplicaci\u00f3n, ahora necesitamos desplegarla. El m\u00e9todo exacto para desplegar la aplicaci\u00f3n depender\u00e1 de tu entorno, sistema operativo y otros factores. Para este ejemplo usaremos Docker, sin embargo, puedes usar servicios de Systemd, servicios de Windows, o cualquier otro m\u00e9todo que prefieras. Docker es simplemente una forma conveniente de desplegar la aplicaci\u00f3n ya que cualquiera que use Linux, Mac o Windows puede utilizarlo.</p> <p>Usaremos <code>faucet</code>, un servidor web muy ligero que gestiona aplicaciones Shiny y APIs Plumber con replicaci\u00f3n integrada y balanceo de carga. Tambi\u00e9n es muy f\u00e1cil de usar y configurar.</p> <p>Primero, crearemos un <code>Dockerfile</code>:</p> <pre><code># Las etiquetas de faucet vienen en la forma\n# de faucet:&lt;versi\u00f3n&gt;-r&lt;versi\u00f3n-de-r&gt;\n# En este ejemplo usaremos etiqueta `r4.3`\n# la cual trae la versi\u00f3n m\u00e1s reciente de\n# faucet y R 4.0.3\nFROM ixpantia/faucet:r4.3\n\n# Instalamos los paquetes requeridos\nRUN Rscript -e \"install.packages(c('shiny', 'tapLock'))\"\n\n# Copiamos el archivo app.R a la imagen\n# en el directorio de trabajo actual\nCOPY --chown=faucet:faucet ./app.R app.R\n\nUSER faucet\n</code></pre> <p>Nota: A partir de ahora, asumiremos que est\u00e1s trabajando en tu m\u00e1quina virtual, o al menos donde pretendes desplegar la aplicaci\u00f3n. Puedes continuar probando la aplicaci\u00f3n localmente si has configurado el ID de cliente OAuth para usar <code>localhost</code> como el origen y URI de redirecci\u00f3n. Expondremos el puerto 80 cuando ejecutemos el contenedor, si quieres cambiar esto, tendr\u00e1s que configurar el ID de cliente OAuth para usar el puerto correcto.</p> <p>Ahora construiremos la imagen:</p> <pre><code>sudo docker build -t my-shiny-app .\n</code></pre> <p>Antes de ejecutar el contenedor, recuerda que necesitamos establecer las variables de entorno. Para este ejemplo, crearemos un archivo llamado <code>.env</code> en cualquier lugar del servidor, asumiremos que ejecutas el siguiente comando en el mismo directorio que el archivo <code>.env</code>. Si no, cambia la ruta a la ruta absoluta del archivo <code>.env</code>.</p> <pre><code>sudo docker run --restart unless-stopped --env-file .env -p 80:3838 my-shiny-app\n</code></pre> <p>Aqu\u00ed estamos ejecutando el contenedor con las variables de entorno disponibles en el archivo <code>.env</code>, y estamos exponiendo el puerto 80 en el host al puerto 3838 en el contenedor. Si quieres usar otro puerto, cambia el primer n\u00famero al puerto que quieras usar.</p> <p>Ahora deber\u00edas poder acceder a tu aplicaci\u00f3n en <code>http://&lt;tu-dominio&gt;</code>. Si quieres usar SSL, querr\u00e1s usar un proxy inverso como Nginx o Apache. Consulta Shiny Server: Running with a Proxy para ejemplos sobre c\u00f3mo hacer esto. Tambi\u00e9n puede leer faucet: Con Proxy Inverso en la documentaci\u00f3n de faucet.</p>"},{"location":"es/get_started/shiny_in_prod/#paso-6-ajustando-nuestro-despliegue","title":"Paso 6: Ajustando nuestro despliegue","text":"<p>Nuestro despliegue actualmente utiliza la configuraci\u00f3n base de faucet, que en su mayor\u00eda es excelente. Sin embargo, es posible que quieras personalizar aspectos como el n\u00famero de trabajadores (el n\u00famero de instancias concurrentes de Shiny), si est\u00e1s utilizando un proxy inverso, probablemente quieras usar los encabezados <code>X-Forwarded-For</code> o <code>X-Real-IP</code> para obtener la direcci\u00f3n IP real del usuario, y otros aspectos del despliegue.</p>"},{"location":"es/get_started/shiny_in_prod/#numero-de-trabajadores","title":"N\u00famero de trabajadores","text":"<p>Por defecto, faucet utilizar\u00e1 el n\u00famero de n\u00facleos de CPU como el n\u00famero de trabajadores. Esto suele ser un buen valor predeterminado, sin embargo, puedes querer cambiar esto dependiendo de tu aplicaci\u00f3n. Por ejemplo, si tu aplicaci\u00f3n es muy intensiva en CPU, es posible que quieras usar menos trabajadores para evitar sobrecargar la CPU. Si tu aplicaci\u00f3n es muy intensiva en I/O, es posible que quieras usar m\u00e1s trabajadores para evitar bloquear a los trabajadores.</p> <p>Para cambiar el n\u00famero de trabajadores, puedes usar la variable de entorno <code>FAUCET_WORKERS</code>. Por ejemplo, si quieres usar 4 trabajadores, puedes cambiar el archivo <code>.env</code> de la siguiente manera:</p> <pre><code>GOOGLE_CLIENT_ID=&lt;tu-id-de-cliente&gt;\nGOOGLE_CLIENT_SECRET=&lt;tu-secreto-de-cliente&gt;\nAPP_URL=&lt;tu-url-de-la-aplicaci\u00f3n&gt;\nFAUCET_WORKERS=4\n</code></pre>"},{"location":"es/get_started/shiny_in_prod/#usando-un-proxy-inverso","title":"Usando un proxy inverso","text":"<p>Cuando usas un proxy inverso, querr\u00e1s usar los encabezados <code>X-Forwarded-For</code> o <code>X-Real-IP</code> para obtener la verdadera direcci\u00f3n IP del usuario. Esto se debe a que la direcci\u00f3n IP del usuario ser\u00e1 la direcci\u00f3n IP del proxy inverso, no la direcci\u00f3n IP del usuario. Esto es importante si quieres registrar correctamente y equilibrar la carga de tu aplicaci\u00f3n.</p> <p>Para usar los encabezados <code>X-Forwarded-For</code> o <code>X-Real-IP</code>, puedes usar la variable de entorno <code>FAUCET_IP_FROM</code>.</p> <p>Por ejemplo, si est\u00e1s usando Nginx, puedes agregar lo siguiente a tu bloque <code>location</code>:</p> <pre><code>proxy_set_header    X-Real-IP $remote_addr;\nproxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n</code></pre> <p>Ahora puedes cambiar el archivo <code>.env</code> de la siguiente manera:</p> <pre><code>GOOGLE_CLIENT_ID=&lt;tu-id-de-cliente&gt;\nGOOGLE_CLIENT_SECRET=&lt;tu-secreto-de-cliente&gt;\nAPP_URL=&lt;tu-url-de-la-aplicaci\u00f3n&gt;\nFAUCET_IP_FROM=x-real-ip\n</code></pre>"},{"location":"es/get_started/shiny_in_prod/#paso-7-permitiendo-que-nuestra-aplicacion-se-ejecute-en-segundo-plano","title":"Paso 7: Permitiendo que nuestra aplicaci\u00f3n se ejecute en segundo plano","text":"<p>Ahora que tenemos nuestra aplicaci\u00f3n en funcionamiento, queremos asegurarnos de que se mantenga en funcionamiento incluso si cerramos nuestro terminal. Para esto ejecutaremos el contenedor en modo desacoplado y usaremos <code>docker compose</code> para gestionar el contenedor.</p> <p>Primero, crearemos un archivo <code>docker-compose.yml</code>:</p> <pre><code>version: \"3.9\"\nservices:\n  my-shiny-app:\n    image: my-shiny-app\n    restart: unless-stopped\n    env_file: .env\n    ports:\n      - \"80:3838\"\n</code></pre> <p>Ahora podemos ejecutar el contenedor en modo desacoplado:</p> <pre><code>sudo docker compose up -d\n</code></pre> <p>Ahora puedes cerrar tu terminal y el contenedor seguir\u00e1 ejecut\u00e1ndose.</p>"},{"location":"es/get_started/shiny_in_prod/#conclusion","title":"Conclusi\u00f3n","text":"<p>Ahora tienes una aplicaci\u00f3n Shiny p\u00fablica protegida por autenticaci\u00f3n de Google. Puedes compartir la URL con cualquiera que quieras y podr\u00e1n acceder a la aplicaci\u00f3n siempre y cuando sean agregados como usuarios de prueba en la pantalla de consentimiento OAuth.</p> <p>O si tu aplicaci\u00f3n es interna, puedes compartir la URL con cualquiera en tu organizaci\u00f3n y podr\u00e1n acceder a la aplicaci\u00f3n siempre y cuando sean parte de tu organizaci\u00f3n.</p> <p>Podr\u00edas mejorar este despliegue a\u00f1adiendo SSL, utilizando un proxy inverso, ajustando el n\u00famero de trabajadores, y otros aspectos del despliegue. Sin embargo, este es un buen punto de partida para una aplicaci\u00f3n Shiny p\u00fablica.</p>"}]}